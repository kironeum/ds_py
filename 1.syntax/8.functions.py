# ***** ФУНКЦИИ *****

# Функции - это обычно "фабрики", которые на выход принимают какие-либо данные и на выход возвращают другие данные

# 1 вариант. Функция, которая на вход ничего не принимает и на выход ничего не возвращает.

def func1():
    print("hello world!")

def func2():
    name = "Alexey"
    print(f"hello {name} !")

# 2 вариант. Функция, которая принимает даннаые (имеет вход(-ы) (аргументы)), но ничего не возвращает

def func3 (argument_1, arg_2):
    result = argument_1 + arg_2
    print(result)

# вызов функции с передачей парамаетров аргументам
# func3(100, 55)

# 2.1 вариант. Функция, принимающая данные, но ничего не возвращает, причем аргументы имеют значение по умолчанию. 

def func4 (arg_1, arg_2, arg_3=10):
    result = arg_1 + arg_2 * arg_3
    print(result)

# func4(100,20,5)

# 2.2 вариант. Функция, принимающая данные, но ничего не возвращает
# позиционные параметры

def func5 (arg_1=10, arg_2=20, arg_3=30):
    result = arg_1 + arg_2 + arg_3
    print(result)

# func5(2, 3, 4) 
# func5(100,20)

# 2.3 вариант. Функция, принимающая данные, но ничего не возвращает
# именованные параметры

def func6 (arg_1=10, arg_2=20, arg_3=30):
    result = arg_1 + arg_2 + arg_3
    print(result)

# func6(arg_3=100, arg_1=1)

# 2.4 вариант. Функция, принимающая данные, но ничего не возвращает
# множественные позиционные параметры

def func7(*args):
    print(args)

# можно передавать произвольное количество позиционных данных
# они будут упаковыаны в виде кортежа    

# func7(10,29,30, "lpa", [1,2,3])

def func8(*args):
    """
    функция которая склвадывает произвольное количество параметров
    """     
    result = 1
    for num in args:
        result += num
    print(result)

# func8(100,2, aat)

# 2.5 вариант. Функция, принимающая данные, но ничего не возвращает
# множественные именованные параметры

def func9(**args):
    print(args)

# можно передавать произвольное количество именованных параметров
# они будут упакоываны в виде словаря
#func9(x=100, y=200, z=300)

import math

def distance_calculate(**args):
    """
    функция, которая вычисляет дистанцию от начала координат (0,0,0) до точки с координатами (x,y,z)

    """
    # переменная keys будет хранить список ключей аргументов из args
    keys = list(args.keys())
    
    # для вычисления дистанции применяем теорему Пифагора 
    summa = 0
    # 
    for axis in keys:
        # суммирование квадратов катетов (значений координатных осей)
        summa += args[axis] ** 2
    
    # извлечение квадратного корня
    distance = math.sqrt(summa)

    print(f"Дистанция: {distance}")

# вызов функции
distance_calculate(x = 10, y = 20, z = 10, a = 5, b = 1)
